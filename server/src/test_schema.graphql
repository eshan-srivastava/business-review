#business entity
type JWT @jwt {
    roles: [String!]!
}

type Business {
    businessId: ID!
    #CYPHER query to calculate average stars of this business from all reviews
    averageStars: Float! 
        @authorization(validate: [
                {where: {jwt: { roles_INCLUDES: "admin"}}}
            ]
        )
        @cypher(
            statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN avg(r.stars) AS averageStars",
            columnName: "averageStars"
        )
    recommended(first: Int = 1): [Business!]!
        @cypher(
            statement: """
            MATCH (this)<-[:REVIEWS]-(:Review)<-[:WROTE]-(u:User)
            MATCH (u)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business)
            WITH rec, COUNT(*) AS score
            RETURN rec AS recommended ORDER BY score DESC LIMIT $first
            """,
            columnName: "recommended"
        )
    name: String!
    #address of business using various field
    city: String!
    state: String!
    address: String!
    #coordinates of business
    location: Point!
    #reviews referring to the business
    reviews: [Review!]! @relationship(type: "REVIEWS", direction: IN)
    #categories tagged to the business
    categories: [Category!]! @relationship(type: "IN_CATEGORY", direction: OUT)
}

type User @authorization(
        validate: [
            {where: { node: {userId: "$jwt.sub"}}}
            {where: {jwt: {roles_INCLUDES: "admin"}}}
        ]
    ){
    userId: ID!
    name: String!
    reviews: [Review!]! @relationship(type: "WROTE", direction: OUT)
}

#extend type User @auth(rules: [{operations: [READ], allow: {userId: "$jwt.sub"}}, {roles: ["admin"]}]) 

type Review {
    reviewId: ID!
    stars: Float!
    date: Date!
    #review message
    text: String
    #user who WROTE the review
    user: User! @relationship(type: "WROTE", direction: IN)
    business: Business! @relationship(type: "REVIEWS", direction: OUT)
}

type Category {
    name: String!
    businesses: [Business!]! @relationship(type: "IN_CATEGORY", direction: IN)
}

enum BusinessOrdering {
    name_asc
    name_desc
}

enum ReviewOrdering {
    stars_asc
    stars_desc
}

type Query {
    fuzzyBusinessBySearch(searchString: String!): [Business!]!
    @cypher(
        statement: """
        CALL db.index.fulltext.queryNodes('businessNameIndex', $searchString+'~')
        YIELD node RETURN node AS fuzzyresult
        """,
        columnName: "fuzzyresult"
    )
}