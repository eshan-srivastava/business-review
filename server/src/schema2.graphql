#business entity
type Business {
    businessId: ID!
    waitTime: Int! @computed
    #CYPHER query to calculate average stars of this business from all reviews
    averageStars: Float!
    @cypher(statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN avg(r.stars)")
    #recommended business based on
    recommended(first: Int = 1): [Business!]!
    @cypher(statement: """
        MATCH (this)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business)
        WITH rec, COUNT(*) AS score
        RETURN rec ORDER BY score DESC LIMIT $first 
        """
    )
    
    name: String!
    #address of business using various field
    city: String!
    state: String!
    address: String!
    #coordinates of business
    location: Point!
    #reviews referring to the business
    reviews: [Review!]! @relationship(type: "REVIEWS", direction: IN)
    #categories tagged to the business
    categories: [Category!]! @relationship(type: "IN_CATEGORY", direction: OUT)
}

type User {
    userId: ID!
    name: String!
    
    reviews: [Review!]! @relationship(type: "WROTE", direction: OUT)
}

type Review {
    reviewId: ID!
    stars: Float!
    date: Date!
    #review message
    text: String
    #user who WROTE the review
    user: User! @relationship(type: "WROTE", direction: IN)
    business: Business! @relationship(type: "REVIEWS", direction: OUT)
}

type Category {
    name: String!
    businesses: [Business!]! @relationship(type: "IN_CATEGORY", direction: IN)
}

enum BusinessOrdering {
    name_asc
    name_desc
}

enum ReviewOrdering {
    stars_asc
    stars_desc
}

type Query {
    allBusinesses(first: Int = 10, offset: Int = 0): [Business!]!
    #the values of first and offset are default values which can be controlled by client
    fuzzyBusinessBySearch(searchString: String!): [Business!]!
    @cypher(
        statement: """
        CALL db.index.fulltext.queryNodes('businessNameIndex', $searchString+'~')
        YIELD node RETURN node
        """
    )
    userById(id: ID!): User
    categories: [Category]
}

